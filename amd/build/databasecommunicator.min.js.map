{"version":3,"file":"databasecommunicator.min.js","sources":["../src/databasecommunicator.js"],"sourcesContent":["define(['jquery', 'core/ajax', 'core/notification'], function($, Ajax, Notification) {\n    return {\n        init: function(params) {\n            const grid = document.getElementById('rating-grid');\n            const plusBtn = document.getElementById('plusBtn');\n            const popup = document.getElementById('rating-popup');\n            const dateInput = document.getElementById('rating-date');\n            //const valueInput = document.getElementById('rating-value');\n            const saveBtn = document.getElementById('rating-save');\n            const pageurl = window.location.pathname + window.location.search;\n\n            function getSelectedRating() {\n               const selected = document.querySelector('input[name=\"rating-value\"]:checked');\n                return selected ? parseInt(selected.value) : null;\n            }\n\n            let editingDiv = null; // null when adding new, non-null when editing\n\n            /**\n             * Opens the rating popup at the given coordinates and pre-fills values.\n             *\n             * @param {number} x - The x-coordinate for the popup.\n             * @param {number} y - The y-coordinate for the popup.\n             * @param {string} [rating=''] - The rating value to set in the popup.\n             * @param {string} [date=''] - The date value to set in the popup.\n             */\n            function openPopup(x, y, rating = '', date = '') {\n                popup.style.position = 'absolute';\n                popup.style.left = `${x}px`;\n                popup.style.top = `${y}px`;\n                popup.style.display = 'block';\n                //valueInput.value = rating;\n                dateInput.value = date;\n                // Deselect any previously selected\n                document.querySelectorAll('input[name=\"rating-value\"]').forEach(r => r.checked = false);\n\n                // Select current\n                if (rating !== '') {\n                    const selectedRadio = document.querySelector(`input[name=\"rating-value\"][value=\"${rating}\"]`);\n                    if (selectedRadio) {\n                        selectedRadio.checked = true;\n                    }\n                }\n            }\n\n            /**\n             * Creates a clickable rating square element with attached event listener\n             * to open the rating popup.\n             *\n             * @param {string} rating - The rating value to display.\n             * @param {string} date - The associated date for the rating.\n             * @param {string} uniqueKey - A unique identifier for the rating.\n             * @returns {HTMLDivElement} The created rating square element.\n             */\n            function createRatingSquare(rating, date, uniqueKey) {\n                const div = document.createElement('div');\n                div.className = `rating-square bg-rating-${rating}`;\n                div.textContent = rating;\n                div.title = `Date: ${date}`;\n                div.dataset.rating = rating;\n                div.dataset.date = date;\n                div.dataset.key = uniqueKey;\n\n                div.addEventListener('click', function(e) {\n                    editingDiv = div;\n                    const rect = div.getBoundingClientRect();\n                    const containerRect = grid.getBoundingClientRect();\n                    const x = rect.left - containerRect.left + grid.scrollLeft;\n                    const y = rect.top - containerRect.top + 45;\n                    const currentRating = div.dataset.rating;\n                    const currentDate = div.dataset.date;\n                    openPopup(x, y, currentRating, currentDate);\n                    e.stopPropagation();\n                });\n\n                return div;\n            }\n\n            // === Show popup when clicking plus button ===\n            plusBtn?.addEventListener('click', (e) => {\n                editingDiv = null;\n                const rect = plusBtn.getBoundingClientRect();\n                const containerRect = grid.getBoundingClientRect();\n                const x = rect.left - containerRect.left + grid.scrollLeft;\n                const y = rect.top - containerRect.top + 45;\n                const today = new Date().toISOString().split('T')[0];\n                openPopup(x, y, '', today);\n                e.stopPropagation();\n            });\n\n\n            /**\n             * Saves the rating and date for the current page.\n             * If editing an existing rating, updates it; otherwise, creates a new one.\n             * Performs basic validation and handles Moodle AJAX call.\n             */\n            function saveData () {\n                //const rating = parseInt(valueInput.value);\n                const rating = getSelectedRating();\n                const date = dateInput.value;\n                //const timestamp = Math.floor(new Date(date).getTime() / 1000);\n                const timestamp = date ? Math.floor(new Date(date).getTime() / 1000) : 0;\n                const ratingKey = editingDiv?.dataset?.key || null;\n\n                if (isNaN(rating) || rating < 0 || rating > 5) {\n                    alert(\"Please enter a rating between 0 and 5\");\n                    return;\n                }\n\n                var temppageurl = pageurl;\n                if (pageurl.includes(\"book\") && !pageurl.includes(\"chapterid\")) {\n                    temppageurl += `&chapterid=${params.chapterid}`;\n                }\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_save_rating',\n                    args: {\n                        courseid: params.courseid,\n                        pageid: params.pageid,\n                        ratingvalue: rating,\n                        ratingdate: timestamp,\n                        pageurl: temppageurl,\n                        pagetitle: params.pagetitle,\n                        chapterid: params.chapterid || null,\n                        ratingkey: ratingKey // used to identify old entry if editing\n                    },\n                    done: function(response) {\n                        // If editing, update the existing div\n                        if (editingDiv) {\n                            editingDiv.className = `rating-square bg-rating-${rating}`;\n                            editingDiv.textContent = rating;\n                            editingDiv.title = `Date: ${date}`;\n                            editingDiv.dataset.rating = rating;\n                            editingDiv.dataset.date = date;\n                        } else {\n                            // Otherwise create new div\n                            const div = createRatingSquare(rating, date, response.ratingkey);\n                            grid.insertBefore(div, plusBtn);\n                        }\n                        popup.style.display = 'none';\n                        // Optionally refresh the page after short delay\n                        location.reload();\n                    },\n                    fail: Notification.exception\n                }]);\n                //location.reload();\n            }\n\n\n\n            // === Save (create or update) rating ===\n            saveBtn?.addEventListener('click', saveData);\n\n            // === Hide popup if clicking outside ===\n            document.addEventListener('click', (e) => {\n                if (!popup.contains(e.target) && e.target !== plusBtn) {\n                    popup.style.display = 'none';\n                }\n            });\n\n            /**\n             * Loads existing rating data from the server and populates the rating grid.\n             * Each rating is converted to a readable date and displayed using rating squares.\n             */\n            function loadExistingData() {\n                // === Load existing ratings from server ===\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_get_ratings',\n                    args: {\n                        courseid: params.courseid,\n                        pageid: params.pageid,\n                        chapterid: params.chapterid || null\n                    },\n                    done: function(ratings) {\n                        ratings.forEach(r => {\n                            const d = new Date(r.ratingdate * 1000);\n                            const dateStr = d.toISOString().split('T')[0];\n                            const div = createRatingSquare(r.ratingvalue, dateStr, r.ratingkey);\n                            grid.insertBefore(div, plusBtn);\n                        });\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n            /**\n             * Saves the next review date for the current page by sending it to the server.\n             * If no date is selected, an empty string is sent.\n             */\n            function saveNextReviewDate() {\n                var date = $('#nextReview').val();\n                if (!date) { date = ''; }\n\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_save_nextreview',\n                    args: {\n                        pageid: params.pageid,\n                        courseid: params.courseid,\n                        nextreview: date,\n                        pageurl: pageurl,\n                        chapterid: params.chapterid || null\n                    },\n                    done: function(response) {\n                        window.console.log('next review date tweaked:', response.status);\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n\n            loadExistingData();\n\n            $('#nextReview').on('input change', saveNextReviewDate);\n\n            /**\n             * Loads the saved next review date from the server and populates the input field.\n             */\n            function loadExistingReviewDate() {\n                Ajax.call([{\n                    methodname: 'block_revisionmanager_get_nextreview',\n                    args: {\n                        pageid: params.pageid,\n                        courseid: params.courseid,\n                        chapterid: params.chapterid || null\n                    },\n                    done: function(data) {\n                        if (data.nextreview) {\n                            $('#nextReview').val(data.nextreview);\n                        }\n                    },\n                    fail: Notification.exception\n                }]);\n            }\n            loadExistingReviewDate();\n        }\n    };\n});\n"],"names":["define","$","Ajax","Notification","init","params","grid","document","getElementById","plusBtn","popup","dateInput","saveBtn","pageurl","window","location","pathname","search","editingDiv","openPopup","x","y","rating","date","style","position","left","top","display","value","querySelectorAll","forEach","r","checked","selectedRadio","querySelector","createRatingSquare","uniqueKey","div","createElement","className","textContent","title","dataset","key","addEventListener","e","rect","getBoundingClientRect","containerRect","scrollLeft","stopPropagation","Date","toISOString","split","selected","parseInt","getSelectedRating","timestamp","Math","floor","getTime","ratingKey","isNaN","alert","temppageurl","includes","chapterid","call","methodname","args","courseid","pageid","ratingvalue","ratingdate","pagetitle","ratingkey","done","response","insertBefore","reload","fail","exception","contains","target","ratings","dateStr","on","val","nextreview","console","log","status","data"],"mappings":"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"}